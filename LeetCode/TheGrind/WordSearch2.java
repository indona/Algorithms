import java.util.*;
import java.lang.*;

class WordSearch2
{
    public static List<String> findWords(char[][] board, String[] words)
    {
        Set<String> resultSet=new HashSet<String>();

        //Sanity
        if(board==null || words==null || board.length==0 || words.length==0)
            return (new ArrayList<String>());

        //Insert words into the Trie
        Trie trie=new Trie();
        for(String word: words)
            trie.insert(word);

        int row=board.length;
        int col=board[0].length;

        boolean[][] visited=new boolean[row][col];

        //Spawn DFS from every cell
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
                dfs(board, visited, trie, resultSet, "", i, j);
        }
        List<String> result=new ArrayList<String>(resultSet);
        return result;
    }

    public static void dfs(char[][] board, boolean[][] visited, Trie trie, Set<String> result, String word, int row, int col)
    {
        //If the cell exceeds the bounds of the board
        if(row<0 || row>=board.length || col<0 || col>=board[0].length)
            return;

        //If the cell was previously visited
        if(visited[row][col])
            return;

        //New partial word is generated by adding the cell's charactr
        word=word+board[row][col];

        //If the new partial word is not a valid word in the trie
        if(!trie.searchPrefix(word))
            return;

        //If the word is a valid word in the trie, add it to the resultset
        if(trie.searchWord(word))
            result.add(word);

        //Else, mark this cell as visited and explore the 4 neighbours of this cell
        visited[row][col]=true;
        dfs(board, visited, trie, result, word, row-1, col);
        dfs(board, visited, trie, result, word, row+1, col);
        dfs(board, visited, trie, result, word, row, col-1);
        dfs(board, visited, trie, result, word, row, col+1);
        visited[row][col]=false;
    }

    public static void main(String args[])
    {
        char[][] board={{'o', 'a', 'a', 'n'}, {'e', 't', 'a', 'e'}, {'i', 'h', 'k', 'r'}, {'i', 'f', 'l', 'v'}};
        String[] words={"oath", "pea", "eat", "rain"};
        List<String> result=new ArrayList<String>();

        result=findWords(board, words);
        System.out.println("Result: "+Arrays.toString(result.toArray()));
    }
}
